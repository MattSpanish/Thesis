# prediction.py

import sys

# Constants
FTE_HOURS_PER_YEAR = 1920
LEAVE_HOURS_PER_YEAR = 120
ROOM_ABSENCE_HOURS_PER_YEAR = 96
SECTIONS = 45
SUBJECTS_PER_SECTION = 8
DURATION_PER_SUBJECT_HOURS = 12

# Calculate total effective hours per year
effective_hours_per_year = FTE_HOURS_PER_YEAR - LEAVE_HOURS_PER_YEAR - ROOM_ABSENCE_HOURS_PER_YEAR

# Convert effective teaching hours per year to minutes per month
effective_minutes_per_month = (effective_hours_per_year * 60) / 12

# Workload assumptions
teaching_load_per_professor = 50
admin_workload_per_student = 5

# Constants from your data
total_minutes_sheet1 = 8520
total_minutes_activities = 259200

# Calculate the ratio of total minutes for activities to total minutes from sheet 1
activity_ratio = total_minutes_activities / total_minutes_sheet1

# Function to predict professors needed based on current student numbers and sections
def predict_professors_needed(current_students, sections):
    # Calculate total workload generated by current students, sections, subjects, and duration
    total_workload_per_month = current_students * (teaching_load_per_professor + admin_workload_per_student) * sections

    # Calculate professors needed based on workload and effective teaching time, adjusted by activity ratio
    professors_needed = (total_workload_per_month / effective_minutes_per_month) * activity_ratio
    
    return professors_needed

def main():
    if len(sys.argv) != 2:
        print("Usage: python prediction.py <current_students>")
        sys.exit(1)

    try:
        current_students = int(sys.argv[1])
    except ValueError:
        print("Error: Please enter a valid number for students.")
        sys.exit(1)

    # Predict professors needed
    professors_needed = predict_professors_needed(current_students, SECTIONS)

    # Save the result to a file
    with open("result.txt", "w") as f:
        f.write(str(round(professors_needed, 2)))

if __name__ == "__main__":
    main()
